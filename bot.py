import asyncio
import re
import sqlite3
import os
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart

from config import BOT_TOKEN, MAX_DOWNLOADS_PER_USER
from utils import detect_platform, download_video, get_user_locale, cleanup_message_later

# --- –õ–æ–≥–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ language_code) ---
DB_NAME = 'bot_users.db'

def setup_database():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN language_code TEXT")
    except sqlite3.OperationalError:
        # –¢–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            download_count INTEGER DEFAULT 0,
            last_reset TEXT,
            language_code TEXT
        )
    ''')
    conn.commit()
    conn.close()

# --- –ù–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# –°–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤—ã–º–∏, –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏
GREETING_TEXTS = {
    "uk": (
        "<b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!</b>\n\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ –∑ TikTok, Instagram —Ç–∞ YouTube –±–µ–∑ –≤–æ–¥—è–Ω–∏—Ö –∑–Ω–∞–∫—ñ–≤.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ.\n\n"
        "‚ÑπÔ∏è <b>–í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n"
        "üîπ **–õ—ñ–º—ñ—Ç:** –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ {limit} –≤—ñ–¥–µ–æ –Ω–∞ –¥–æ–±—É.\n"
        "üîπ **–ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è:** –ù–∞–¥—ñ—Å–ª–∞–Ω—ñ –º–Ω–æ—é –≤—ñ–¥–µ–æ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è."
    ),
    "pl": (
        "<b>Witaj!</b>\n\n"
        "Pomogƒô Ci pobraƒá filmy z TikToka, Instagrama i YouTube bez znak√≥w wodnych.\n\n"
        "Po prostu wy≈õlij mi link do filmu.\n\n"
        "‚ÑπÔ∏è <b>Wa≈ºne informacje:</b>\n"
        "üîπ **Limit:** Mo≈ºesz pobraƒá do {limit} film√≥w dziennie.\n"
        "üîπ **Automatyczne usuwanie:** Wys≈Çane przeze mnie filmy zostanƒÖ automatycznie usuniƒôte po 5 minutach, aby zaoszczƒôdziƒá miejsce."
    ),
    "en": (
        "<b>Welcome!</b>\n\n"
        "I will help you download videos from TikTok, Instagram, and YouTube without watermarks.\n\n"
        "Just send me a link to a video.\n\n"
        "‚ÑπÔ∏è <b>Important Information:</b>\n"
        "üîπ **Limit:** You can download up to {limit} videos per day.\n"
        "üîπ **Auto-deletion:** Videos sent by me will be automatically deleted after 5 minutes to save space."
    )
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk"),
        InlineKeyboardButton(text="üáµüá± Polski", callback_data="lang_pl"),
        InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
    ]
])


def get_user_db(user_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()

# ... –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞ ...
# (check_and_update_limit, bot, dp, keyboard, warning_texts)

def check_and_update_limit(user_id: int) -> bool:
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    now = datetime.utcnow()
    
    if user:
        last_reset = datetime.fromisoformat(user["last_reset"])
        if now - last_reset > timedelta(days=1):
            cursor.execute("UPDATE users SET download_count = 1, last_reset = ? WHERE user_id = ?", (now.isoformat(), user_id))
        elif user["download_count"] >= MAX_DOWNLOADS_PER_USER:
            conn.close()
            return False
        else:
            cursor.execute("UPDATE users SET download_count = download_count + 1 WHERE user_id = ?", (user_id,))
    else:
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —è–∑—ã–∫–∞
        cursor.execute("INSERT INTO users (user_id, download_count, last_reset) VALUES (?, 1, ?)", (user_id, now.isoformat()))

    conn.commit()
    conn.close()
    return True

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÅ –°–∫–∞—á–∞—Ç–∏ —â–µ", callback_data="download_more")]])
warning_texts = {
    "uk": "‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –≤—ñ–¥–µ–æ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω.\n–ó–±–µ—Ä–µ–∂—ñ—Ç—å –π–æ–≥–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å.",
    "pl": "‚ö†Ô∏è <b>Uwaga:</b> film zostanie automatycznie usuniƒôty za 5 minut.\nPobierz go wcze≈õniej."
}

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: /start —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("Please select your language / –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Proszƒô wybraƒá jƒôzyk:", reply_markup=language_keyboard)

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(F.data.startswith("lang_"))
async def select_language(callback: CallbackQuery):
    lang_code = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –≤ –ë–î
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR IGNORE –∏ UPDATE –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
    cursor.execute("INSERT OR IGNORE INTO users (user_id, language_code) VALUES (?, ?)", (user_id, lang_code))
    cursor.execute("UPDATE users SET language_code = ? WHERE user_id = ?", (lang_code, user_id))
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    text = GREETING_TEXTS.get(lang_code, GREETING_TEXTS["en"]).format(limit=MAX_DOWNLOADS_PER_USER)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(text, parse_mode=ParseMode.HTML)
    await callback.answer() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞


@dp.message(F.text.regexp(r'(https?://\S+)'))
async def handle_video_request(message: Message):
    # –õ–æ–≥–∏–∫–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π, –Ω–æ —Ç–µ–ø–µ—Ä—å get_user_locale –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ-–Ω–æ–≤–æ–º—É
    user_id = message.from_user.id
    locale = await get_user_locale(message) # get_user_locale —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è

    if not check_and_update_limit(user_id):
        text = {"uk": f"üö´ –í–∏ –¥–æ—Å—è–≥–ª–∏ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å ({MAX_DOWNLOADS_PER_USER}).", "pl": f"üö´ OsiƒÖgniƒôto dzienny limit pobierania ({MAX_DOWNLOADS_PER_USER})."}.get(locale, f"üö´ Daily download limit reached ({MAX_DOWNLOADS_PER_USER}).")
        await message.reply(text)
        return

    url_match = re.search(r'(https?://\S+)', message.text)
    if not url_match: return

    url = url_match.group(1)
    platform = detect_platform(url)

    if platform:
        status_message = await message.answer("‚è¨ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤—ñ–¥–µ–æ...")
        video_path = await download_video(url, platform)
        
        if video_path:
            try:
                sent_video = await message.answer_video(video=FSInputFile(path=video_path), reply_markup=keyboard)
                await message.answer(warning_texts.get(locale))
                asyncio.create_task(cleanup_message_later(bot, sent_video.chat.id, sent_video.message_id, 300))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–µ–æ.")
            finally:
                if os.path.exists(video_path):
                    os.remove(video_path)
                await status_message.delete()
        else:
            await status_message.delete()
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ. –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–µ –∞–±–æ —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    else:
        await message.reply("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∞–±–æ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞.")

@dp.callback_query(F.data == "download_more")
async def handle_repeat(callback_query: CallbackQuery):
    locale = await get_user_locale(callback_query) # get_user_locale —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
    text = {"uk": "üîÅ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.", "pl": "üîÅ Wy≈õlij nowy link do pobrania."}.get(locale)
    await callback_query.message.answer(text)
    await callback_query.answer()