import asyncio
import re
import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart

from config import BOT_TOKEN, MAX_DOWNLOADS_PER_USER
from utils import detect_platform, download_video, cleanup_message_later
from database import check_and_update_limit, update_user_language, get_user_locale as db_get_user_locale

GREETING_TEXTS = {
    "uk": ("<b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!</b>\n\n–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ –∑ TikTok, Instagram —Ç–∞ YouTube –±–µ–∑ –≤–æ–¥—è–Ω–∏—Ö –∑–Ω–∞–∫—ñ–≤.\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ.\n\n‚ÑπÔ∏è <b>–í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\nüîπ <b>–õ—ñ–º—ñ—Ç:</b> –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ {limit} –≤—ñ–¥–µ–æ –Ω–∞ –¥–æ–±—É.\nüîπ <b>–ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è:</b> –ù–∞–¥—ñ—Å–ª–∞–Ω—ñ –º–Ω–æ—é –≤—ñ–¥–µ–æ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è."),
    "pl": ("<b>Witaj!</b>\n\nPomogƒô Ci pobraƒá filmy z TikToka, Instagrama i YouTube bez znak√≥w wodnych.\n\nPo prostu wy≈õlij mi link do filmu.\n\n‚ÑπÔ∏è <b>Wa≈ºne informacje:</b>\nüîπ <b>Limit:</b> Mo≈ºesz pobraƒá do {limit} film√≥w dziennie.\nüîπ <b>Automatyczne usuwanie:</b> Wys≈Çane przeze mnie filmy zostanƒÖ automatycznie usuniƒôte po 5 minutach, aby zaoszczƒôdziƒá miejsce."),
    "en": ("<b>Welcome!</b>\n\nI will help you download videos from TikTok, Instagram, and YouTube without watermarks.\n\nJust send me a link to a video.\n\n‚ÑπÔ∏è <b>Important Information:</b>\nüîπ <b>Limit:</b> You can download up to {limit} videos per day.\nüîπ <b>Auto-deletion:</b> Videos sent by me will be automatically deleted after 5 minutes to save space.")
}
language_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk"), InlineKeyboardButton(text="üáµüá± Polski", callback_data="lang_pl"), InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]])
keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÅ –°–∫–∞—á–∞—Ç–∏ —â–µ", callback_data="download_more")]])
warning_texts = {"uk": "‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –≤—ñ–¥–µ–æ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω.\n–ó–±–µ—Ä–µ–∂—ñ—Ç—å –π–æ–≥–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å.", "pl": "‚ö†Ô∏è <b>Uwaga:</b> film zostanie automatycznie usuniƒôty za 5 minut.\nPobierz go wcze≈õniej.", "en": "‚ö†Ô∏è <b>Attention:</b> the video will be automatically deleted in 5 minutes.\nPlease save it beforehand."}

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

async def get_user_locale(message: Message | CallbackQuery) -> str:
    user_lang = await db_get_user_locale(message.from_user.id)
    if user_lang: return user_lang
    lang_from_tg = message.from_user.language_code
    if lang_from_tg:
        if lang_from_tg.startswith("pl"): return "pl"
        if lang_from_tg.startswith("uk"): return "uk"
    return "en"

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("Please select your language / –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Proszƒô wybraƒá jƒôzyk:", reply_markup=language_keyboard)

@dp.callback_query(F.data.startswith("lang_"))
async def select_language(callback: CallbackQuery):
    lang_code = callback.data.split("_")[1]
    await update_user_language(callback.from_user.id, lang_code)
    text = GREETING_TEXTS.get(lang_code, GREETING_TEXTS["en"]).format(limit=MAX_DOWNLOADS_PER_USER)
    await callback.message.edit_text(text, parse_mode=ParseMode.HTML)
    await callback.answer()

@dp.message(F.text.regexp(r'(https?://\S+)'))
async def handle_video_request(message: Message):
    user_id = message.from_user.id
    locale = await get_user_locale(message)
    if not await check_and_update_limit(user_id):
        limit_exceeded_texts = {"uk": f"üö´ –í–∏ –¥–æ—Å—è–≥–ª–∏ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å ({MAX_DOWNLOADS_PER_USER}).", "pl": f"üö´ OsiƒÖgniƒôto dzienny limit pobierania ({MAX_DOWNLOADS_PER_USER}).", "en": f"üö´ Daily download limit reached ({MAX_DOWNLOADS_PER_USER})."}
        await message.reply(limit_exceeded_texts.get(locale, limit_exceeded_texts['en']))
        return
    url_match = re.search(r'(https?://\S+)', message.text)
    if not url_match: return
    url = url_match.group(1)
    platform = detect_platform(url)
    if platform:
        status_message = await message.answer("‚è¨ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤—ñ–¥–µ–æ...")
        video_path = await download_video(url, platform)
        if video_path:
            try:
                sent_video = await message.answer_video(video=FSInputFile(path=video_path), reply_markup=keyboard)
                await message.answer(warning_texts.get(locale, warning_texts['en']))
                asyncio.create_task(cleanup_message_later(bot, sent_video.chat.id, sent_video.message_id, 300))
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}", exc_info=True)
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–µ–æ.")
            finally:
                if os.path.exists(video_path):
                    os.remove(video_path)
                await status_message.delete()
        else:
            await status_message.delete()
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ. –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–µ –∞–±–æ —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    else:
        await message.reply("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∞–±–æ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞.")

@dp.callback_query(F.data == "download_more")
async def handle_repeat(callback_query: CallbackQuery):
    locale = await get_user_locale(callback_query)
    repeat_texts = {"uk": "üîÅ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.", "pl": "üîÅ Wy≈õlij nowy link do pobrania.", "en": "üîÅ Send a new link to download."}
    await callback_query.message.answer(repeat_texts.get(locale, repeat_texts['en']))
    await callback_query.answer()